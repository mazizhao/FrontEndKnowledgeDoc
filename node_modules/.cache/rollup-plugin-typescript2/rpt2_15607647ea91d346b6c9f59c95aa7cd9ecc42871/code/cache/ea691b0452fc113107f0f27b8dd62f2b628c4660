{"code":"// 常见的类型： 基础类型、高级类型 = 自定义类型\r\n// ts 主要的三个特点：\r\n// 1）ts 类型是从安全的角度出发的， 一切从安全角度来考虑\r\n// 2）ts 是在开发的时候来检测 不是在运行的时候，所以代码并没有被真正的执行\r\n// 3）ts 中是具备一个类型推导的特点，不是所有的变量都需要增加类型。 只有无法推断或者推断错误的时候我们才需要编写类型\r\n// ts 最终编译后，类型就消失了\r\nlet name = 'day';\r\nlet age = 3;\r\nlet male = true;\r\n// 原始数据类型都要采用小写的类型，大写类型（包装的类型）用来描述的实例\r\nlet s1 = 'abc';\r\n// let s2: string = new String('abc');\r\nlet s3 = new String('abc');\r\nlet s4 = 'abc';\r\n'abc'.charAt; // 默认当我们调用基本类型的方法时，会将当前基本类型包装成对象\r\n// 在ts中，大写类型可以描述实例\r\nclass Dog {\r\n}\r\nlet dog = new Dog;\r\n//包装对象\r\n// 在真正开发的时候，肯定是采用模块化开发\r\n// 数组的类型：[] 数组的概念：数组是多个相同类型的数据集合 js中数据可以随意组合\r\n// ts 中有两种方式可以标注数组类型\r\nlet arr1 = [1, 2, 3];\r\nlet arr2 = ['a', 'b', 'c'];\r\nlet arr3 = [1, 'a'];\r\nlet arr4 = ['a', 'b']; // 采用泛型来声明数组\r\n// ts 中的元组（特点是长度固定、类型固定）\r\n// 元组可以通过数组的方法进行新增，只能新增已经存在的类型，无法取出新增的数据\r\nlet tuple = ['jw', 3, true];\r\nlet useName = tuple[0];\r\ntuple.push('xxx');\r\n// let three = tuple[3];\r\n// ts中的枚举，自带类型的对象，枚举的值，如果没有赋值，从0开始递增；反举，只能在我们值为数字的情况\r\nvar USER_ROLE;\r\n(function (USER_ROLE) {\r\n    USER_ROLE[USER_ROLE[\"USER\"] = 0] = \"USER\";\r\n    USER_ROLE[USER_ROLE[\"ADMIN\"] = 1] = \"ADMIN\";\r\n    USER_ROLE[USER_ROLE[\"SUPER_ADMIN\"] = 2] = \"SUPER_ADMIN\";\r\n})(USER_ROLE || (USER_ROLE = {}));\r\nlet person = { name: 'xxx' };\r\nexport {};\r\n//# sourceMappingURL=index.js.map","references":[],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"AAAA,2BAA2B;AAE3B,cAAc;AACd,gCAAgC;AAChC,yCAAyC;AACzC,8DAA8D;AAC9D,kBAAkB;AAElB,IAAI,IAAI,GAAW,KAAK,CAAC;AACzB,IAAI,GAAG,GAAW,CAAC,CAAC;AACpB,IAAI,IAAI,GAAY,IAAI,CAAC;AAEzB,qCAAqC;AAErC,IAAI,EAAE,GAAW,KAAK,CAAC;AACvB,sCAAsC;AAEtC,IAAI,EAAE,GAAW,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC;AACnC,IAAI,EAAE,GAAW,KAAK,CAAC;AAEvB,KAAK,CAAC,MAAM,CAAA,CAAC,gCAAgC;AAE7C,kBAAkB;AAClB,MAAM,GAAG;CAAE;AACX,IAAI,GAAG,GAAQ,IAAI,GAAG,CAAA;AAEtB,MAAM;AAEN,sBAAsB;AAEtB,4CAA4C;AAC5C,oBAAoB;AACpB,IAAI,IAAI,GAAa,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,CAAC;AAC7B,IAAI,IAAI,GAAa,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACrC,IAAI,IAAI,GAAwB,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;AACzC,IAAI,IAAI,GAAkB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,YAAY;AAElD,wBAAwB;AACxB,wCAAwC;AACxC,IAAI,KAAK,GAA+C,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;AACxE,IAAI,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;AACvB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAClB,wBAAwB;AAExB,oDAAoD;AACpD,IAAK,SAIJ;AAJD,WAAK,SAAS;IACV,yCAAI,CAAA;IACJ,2CAAK,CAAA;IACL,uDAAW,CAAA;AACf,CAAC,EAJI,SAAS,KAAT,SAAS,QAIb;AAID,IAAI,MAAM,GAAG,EAAE,IAAI,EAAE,KAAK,EAAC,CAAC\"}"}
